Question 2: first 12 coordinates popped from stack (in order of South West North East).
Here, "popping" is recorded when an element is read from top() (Using <stack>)
(3,5)
(4,5)
(5,5)
(6,5)
(7,5)
(8,5)
(8,4)
(8,3)
(8,2)
(8,1)
(8,2)
(8,3)

Question 4: first 12 coordinates popped from queue (popping = when .pop() called to avoid repetition). In this order because "reading" from front() treated different from pop().
<queue> was used here.
(3,5)
(4,5)
(3,5)
(5,5)
(4,5)
(3,5)
(6,5)
(5,5)
(4,5)
(3,5)
(7,5)
(6,5)
The queue algorithm which uses standard queues forces the queue to behave as a stack using front() and pop(). 
When a new direction to move is found, the queue (with coordinates in the order of a stack) is first emptied into two temporary dynamic integer arrays, then the new location is enqueued, and finally all the coordinates in the arrays are enqueued in the same order.
Thus the new queue is in the order of a stack. The queue pops/dequeues an item if a dead-end is found (this is different from reading with front()).
The stack algorithm is much simpler as the coords are already in the correct order.
